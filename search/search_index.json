{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction It is an end to end automated machine learning solution where the user will only give dataset in recognizable formats and select the type of the problem, and the result will be the best performing hyper tuned machine learning model. The descriptive and graphical analysis of the data are also displayed. The user will also get privileges to choose the deployment option. (eg: AWS, GCP)","title":"Home"},{"location":"#introduction","text":"It is an end to end automated machine learning solution where the user will only give dataset in recognizable formats and select the type of the problem, and the result will be the best performing hyper tuned machine learning model. The descriptive and graphical analysis of the data are also displayed. The user will also get privileges to choose the deployment option. (eg: AWS, GCP)","title":"Introduction"},{"location":"API%20Reference/","text":"API DataGetter read_data_from_csv pd.read_csv(\"data.csv\") Method Description This method will be used to read data from a csv file or a flat file Input parameter names self,file_name, header,names, use_cols, separator Input Parameter Description - file_name: name of the file to be read - header: Row number(s) to be used as column names - names : array-like, optional - List of column names to use. If file contains no header row, then you should explicitly pass header=None . - Use_cols: To load a subset of columns - Separator: Delimiter to use Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message read_data_from_html pd.read_html(\"www.google.com\") Method Description This method will be used to read data from an HTML web page Input parameter self,url Input Parameter Description - url: URL of the HTML page to be read. Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"API"},{"location":"API%20Reference/#api","text":"","title":"API"},{"location":"API%20Reference/#datagetter","text":"","title":"DataGetter"},{"location":"API%20Reference/#read_data_from_csv","text":"pd.read_csv(\"data.csv\") Method Description This method will be used to read data from a csv file or a flat file Input parameter names self,file_name, header,names, use_cols, separator Input Parameter Description - file_name: name of the file to be read - header: Row number(s) to be used as column names - names : array-like, optional - List of column names to use. If file contains no header row, then you should explicitly pass header=None . - Use_cols: To load a subset of columns - Separator: Delimiter to use Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"read_data_from_csv"},{"location":"API%20Reference/#read_data_from_html","text":"pd.read_html(\"www.google.com\") Method Description This method will be used to read data from an HTML web page Input parameter self,url Input Parameter Description - url: URL of the HTML page to be read. Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"read_data_from_html"},{"location":"DevelopersGuide/","text":"def read_csv: pd.read_csv('input.csv')","title":"Developers guide"},{"location":"Extending%26Contributions/","text":"Found a bug? Have a new feature to suggest? Want to contribute changes to the codebase? Make sure to read this first.","title":"Extending & Contributing"},{"location":"GettingStarted/","text":"Are you an engineer or data scientist? Do you ship real-world machine learning solutions? Check out our Introduction to AutoNeuro for engineers Are you a machine learning researcher? Do you publish at NeurIPS and push the state-of-the-art in CV and NLP? Check out our Introduction to AutoNeuro for researchers Further starter resources . The AutoNeuro ecosystem . Learning resources . Frequently Asked Questions","title":"GettingStarted"},{"location":"How%20to%20use/","text":"How to get AutoNeuro? Installation using pip Test Cases to verify if the installation is successful.","title":"How to use?"},{"location":"How%20to%20use/#how-to-get-autoneuro","text":"Installation using pip Test Cases to verify if the installation is successful.","title":"How to get AutoNeuro?"},{"location":"Introduction%20to%20engineers/","text":"Introduction to AutoNeuro for Engineers Author: DocumentationTeam Date created: 2020/04/01 Last modified: 2020/04/28 Description: Everything you need to know to use AutoNeuro to build real-world machine learning solutions.","title":"Introduction to AutoNeuro for engineers"},{"location":"Introduction%20to%20researchers/","text":"Introduction to AutoNeuro for Researchers Author: Documentation Team Date created: 2020/04/01 Last modified: 2020/04/28 Description: Everything you need to know to use AutoNeuro for machine learning research.","title":"Introduction to AutoNeuro for researchers"},{"location":"abhi/","text":"Features Data sets automatically analyzed Machine learning Modelling techniques using both classification and Regression Extensive APIs to integrate AutoNeuro into your own tools and scripts Evaluations of the models for easy comparison and reuse Automated model building based on the type of problem. Output model is hyper-parameter tuned model Choice based automated deployment to various clouds. Provision of user friendly interface to select input and target features","title":"Features"},{"location":"abhi/#features","text":"Data sets automatically analyzed Machine learning Modelling techniques using both classification and Regression Extensive APIs to integrate AutoNeuro into your own tools and scripts Evaluations of the models for easy comparison and reuse Automated model building based on the type of problem. Output model is hyper-parameter tuned model Choice based automated deployment to various clouds. Provision of user friendly interface to select input and target features","title":"Features"},{"location":"api/","text":"API DataGetter read_data_from_csv pd.read_csv(\"data.csv\") Method Description This method will be used to read data from a csv file or a flat file Input parameter names self,file_name, header,names, use_cols, separator Input Parameter Description - file_name: name of the file to be read - header: Row number(s) to be used as column names - names : array-like, optional - List of column names to use. If file contains no header row, then you should explicitly pass header=None . - Use_cols: To load a subset of columns - Separator: Delimiter to use Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message read_data_from_html pd.read_html(\"www.google.com\") Method Description This method will be used to read data from an HTML web page Input parameter self,url Input Parameter Description - url: URL of the HTML page to be read. Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"API Reference"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#datagetter","text":"","title":"DataGetter"},{"location":"api/#read_data_from_csv","text":"pd.read_csv(\"data.csv\") Method Description This method will be used to read data from a csv file or a flat file Input parameter names self,file_name, header,names, use_cols, separator Input Parameter Description - file_name: name of the file to be read - header: Row number(s) to be used as column names - names : array-like, optional - List of column names to use. If file contains no header row, then you should explicitly pass header=None . - Use_cols: To load a subset of columns - Separator: Delimiter to use Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"read_data_from_csv"},{"location":"api/#read_data_from_html","text":"pd.read_html(\"www.google.com\") Method Description This method will be used to read data from an HTML web page Input parameter self,url Input Parameter Description - url: URL of the HTML page to be read. Output A pandas Dataframe On Exception Write the exception in the log file. Raise an exception with the appropriate error message","title":"read_data_from_html"},{"location":"code/","text":"Code Examples Our code examples are short. All of our examples are written as Jupyter notebooks and can be run in one click in Google Colab, a hosted notebook environment that requires no setup and runs in the cloud. Google Colab includes GPU and TPU runtimes. Supervised Machine Learning . Linear Regression . Logistic Regression . k-Nearest Neighbors . Support Vector Machines(SVM) . Decision Trees and Random Forests . Neural Networks Unsupervised Machine Learning Clustering . K-Means . DBSCAN . Hierarchical Cluster Analysis (HCA) Anomaly detection and novelty detection . One-class SVM . Isolation Forest Visualization and dimensionality reduction . Principal Component Analysis (PCA) . Kernel PCA . Locally-Linear Embedding (LLE) . t-distributed Stochastic Neighbor Embedding (t-SNE) Association rule learning . Apriori . Eclat Adding a new code example We welcome new code examples! Here are our rules: They should be shorter than 300 lines of code (comments may be as long as you want). They should demonstrate modern Keras / TensorFlow 2.0 best practices. They should be substantially different in topic from all examples listed above. They should be extensively documented & commented. New examples are added via Pull Requests to the https://github.com/Jhansi-27/Sample_Auto repository. They must be submitted as a .py file that follows a specific format. They are usually generated from Jupyter notebooks.","title":"Code Examples"},{"location":"howto/","text":"How to get AutoNeuro? Installation using pip Test Cases to verify if the installation is successful.","title":"How to get AutoNeuro?"},{"location":"howto/#how-to-get-autoneuro","text":"Installation using pip Test Cases to verify if the installation is successful.","title":"How to get AutoNeuro?"},{"location":"license/","text":"LICENSE Copyright 2020 AbhishekDand Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"license/#license","text":"Copyright 2020 AbhishekDand Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"userguide/","text":"AutoNeuro User Guide Installing AutoNeuro In this section we will install AutoNeuro in our system.We can install AutoNeuro through many ways. Using pip install Open Command Prompt and type pip install AutoNeuro. This will install latest stable version of AutoNeuro in your system. pip install autoneuro Getting HomeScreen for AutoNeuro \"\" here we will explain what code user has to write to start the process. For now I have written steps for running app.py\"\" If you have successfully installed AutoNeuro then: Go to application\\app.py and run Open your web browser and go to localhost:5000 On Successful execution of steps you will see this screen. Adding Data Set for Training To add training dataset: Click on Choose a data sources drop down: Select the type of the file you are uploading. You can upload CSV, Excel, HTML or Text files. Giver the type of delimiter used in the CSV File. Click on Choose file and select your training dataset file. Once you select the dataset it will be validated and on successful validation you would be able to upload data for training. On clicking upload your data will be uploaded and you will be land to the following page. On this page you will be able to view detailed analysis of your training data. You will get information regarding missing values, columns with zero std deviation and if there is any duplicate column. If you have reached this page then you have successfully loaded the data for training. Now it\u2019s time to train the data. Training the data After successfully uploading the data go to \u201cChoose a Problem Type\u201d drop down and select the type of your Problem. You can select from Regression and Classification. AutoNeuro will automatically perform feature engineering and train your data with the highest optimization. After selecting problem type, if you want to drop any unwanted columns then you can select that from the \u201cDrop Unwanted Columns\u201d. The final step is to select the Target Column (dependent column which you want to predict) and click \u201cSubmit\u201d. After you press Submit, you will see various charts and graphs to understand your data well. Once you have viewed your data in graph press \u201cTrain Model\u201d for training the model. AutoNeuro will train various models with different hyper parameters and generate report for the best model. If the data is trained successfully then you will be able to see report. Making Prediction Once you have successfully trained the data you will be able to make predictions. Press \u2018Try Prediction\u2019 button at the bottom of the report for making Predictions. For making prediction select the type of testing datafile. Select the test file using \u201cChoose File\u201d. Press \u201cPredict\u201d to generate Prediction Report. Deploying Model to Cloud Once you are satisfied with the model Select the cloud Service in which you want to deploy model. We offer deployment in Azure, GCP, AWS. Click on Deploy to proceed further.","title":"User Guide"},{"location":"userguide/#autoneuro-user-guide","text":"","title":"AutoNeuro User Guide"},{"location":"userguide/#installing-autoneuro","text":"In this section we will install AutoNeuro in our system.We can install AutoNeuro through many ways.","title":"Installing AutoNeuro"},{"location":"userguide/#using-pip-install","text":"Open Command Prompt and type pip install AutoNeuro. This will install latest stable version of AutoNeuro in your system. pip install autoneuro","title":"Using pip install"},{"location":"userguide/#getting-homescreen-for-autoneuro","text":"\"\" here we will explain what code user has to write to start the process. For now I have written steps for running app.py\"\" If you have successfully installed AutoNeuro then: Go to application\\app.py and run Open your web browser and go to localhost:5000 On Successful execution of steps you will see this screen.","title":"Getting HomeScreen for AutoNeuro"},{"location":"userguide/#adding-data-set-for-training","text":"To add training dataset: Click on Choose a data sources drop down: Select the type of the file you are uploading. You can upload CSV, Excel, HTML or Text files. Giver the type of delimiter used in the CSV File. Click on Choose file and select your training dataset file. Once you select the dataset it will be validated and on successful validation you would be able to upload data for training. On clicking upload your data will be uploaded and you will be land to the following page. On this page you will be able to view detailed analysis of your training data. You will get information regarding missing values, columns with zero std deviation and if there is any duplicate column. If you have reached this page then you have successfully loaded the data for training. Now it\u2019s time to train the data.","title":"Adding Data Set for Training"},{"location":"userguide/#training-the-data","text":"After successfully uploading the data go to \u201cChoose a Problem Type\u201d drop down and select the type of your Problem. You can select from Regression and Classification. AutoNeuro will automatically perform feature engineering and train your data with the highest optimization. After selecting problem type, if you want to drop any unwanted columns then you can select that from the \u201cDrop Unwanted Columns\u201d. The final step is to select the Target Column (dependent column which you want to predict) and click \u201cSubmit\u201d. After you press Submit, you will see various charts and graphs to understand your data well. Once you have viewed your data in graph press \u201cTrain Model\u201d for training the model. AutoNeuro will train various models with different hyper parameters and generate report for the best model. If the data is trained successfully then you will be able to see report.","title":"Training the data"},{"location":"userguide/#making-prediction","text":"Once you have successfully trained the data you will be able to make predictions. Press \u2018Try Prediction\u2019 button at the bottom of the report for making Predictions. For making prediction select the type of testing datafile. Select the test file using \u201cChoose File\u201d. Press \u201cPredict\u201d to generate Prediction Report.","title":"Making Prediction"},{"location":"userguide/#deploying-model-to-cloud","text":"Once you are satisfied with the model Select the cloud Service in which you want to deploy model. We offer deployment in Azure, GCP, AWS. Click on Deploy to proceed further.","title":"Deploying Model to Cloud"},{"location":"Examples/decision_tree/","text":"","title":"Decision tree"},{"location":"Examples/k-nearest/","text":"","title":"K nearest"},{"location":"Examples/linear/","text":"Linear Regression Linear regression is probably one of the most important and widely used regression techniques. It\u2019s among the simplest regression methods. One of its main advantages is the ease of interpreting results. import matplotlib.pyplot as plt import numpy as np from sklearn import datasets, linear_model from sklearn.metrics import mean_squared_error, r2_score Load the diabetes dataset diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True) Use only one feature diabetes_X = diabetes_X[:, np.newaxis, 2] Split the data into training/testing sets diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:] Split the targets into training/testing sets diabetes_y_train = diabetes_y[:-20] diabetes_y_test = diabetes_y[-20:] Create linear regression object regr = linear_model.LinearRegression() Train the model using the training sets regr.fit(diabetes_X_train, diabetes_y_train) Make predictions using the testing set diabetes_y_pred = regr.predict(diabetes_X_test) The coefficients print('Coefficients: \\n', regr.coef_) The mean squared error print('Mean squared error: %.2f' % mean_squared_error(diabetes_y_test, diabetes_y_pred)) The coefficient of determination: 1 is perfect prediction print('Coefficient of determination: %.2f' % r2_score(diabetes_y_test, diabetes_y_pred)) Plot outputs plt.scatter(diabetes_X_test, diabetes_y_test, color='black') plt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3) plt.xticks(()) plt.yticks(()) plt.show()","title":"Linear"},{"location":"Examples/logistic/","text":"Logistic regression is a statistical method for predicting binary classes. The outcome or target variable is dichotomous in nature. Dichotomous means there are only two possible classes. For example, it can be used for cancer detection problems. It computes the probability of an event occurrence. It is a special case of linear regression where the target variable is categorical in nature. It uses a log of odds as the dependent variable. Logistic Regression predicts the probability of occurrence of a binary event utilizing a logit function.","title":"Logistic"},{"location":"Examples/svm/","text":"","title":"Svm"}]}